---
import api from "@api.json";
import { Code } from "astro:components";

interface Props {
	entry: keyof typeof api;
}

const { entry }: Props = Astro.props;

const apiEntry = api[entry];

type TextContent = {
	type: "text";
	content: string;
};

type CodeContent = {
	type: "code";
	content: string;
};
type Parsed = TextContent | CodeContent;

function parseText(text: string): Parsed[] {
	// Everything wrapped in backticks is CodeContent. Everything else is TextContent.
	const res: Parsed[] = [];

	let curr: Parsed = {
		type: "text",
		content: "",
	};
	for (const char of text) {
		if (char === "`") {
			res.push(curr);
			curr = {
				type: curr.type === "text" ? "code" : "text",
				content: "",
			};
			continue;
		}

		curr.content += char;
	}
	res.push(curr);

	return res;
}

type Section = {
	title: string;
	description: string;
	stuff: (typeof apiEntry)[keyof typeof apiEntry];
};
const sections = [
	{
		title: "Constructor Props",
		description: "The props that are passed when calling `" + `new ${entry}()` + "`",
		stuff: apiEntry.constructorProps,
	},
	{
		title: "Methods",
		description: "The methods returned from `" + `new ${entry}()` + "`",
		stuff: apiEntry.methods,
	},
	{
		title: "Properties",
		description: "The properties returned from `" + `new ${entry}()` + "`",
		stuff: apiEntry.properties,
	},
];

type CodeTheme = Parameters<typeof Code>[0]["theme"];
const themes = {
	dark: "catppuccin-mocha",
	light: "rose-pine-dawn",
} satisfies Record<string, CodeTheme>;
---

{
	sections.map((section) => (
		<div>
			<h3>{section.title}</h3>
			<p>
				{parseText(section.description).map((c) =>
					c.type === "text" ? (
						c.content
					) : (
						<>
							<Code class="dark:hidden" code={c.content} lang="ts" theme={themes.light} inline />
							<Code
								class="hidden dark:inline"
								code={c.content}
								theme={themes.dark}
								lang="ts"
								inline
							/>
						</>
					),
				)}
			</p>
			<ul class="border-l border-gray-700 ml-2 pl-4">
				{section.stuff.map((entry) => (
					<li class="list-none">
						<h4>{entry.name}</h4>
						<>
							<Code class="dark:hidden" code={entry.type} lang="ts" theme={themes.light} />
							<Code class="hidden dark:block" code={entry.type} theme={themes.dark} lang="ts" />
						</>
						<p>
							{parseText(entry.description).map((c) =>
								c.type === "text" ? (
									c.content
								) : (
									<>
										<Code
											class="dark:hidden"
											code={c.content}
											lang="ts"
											theme={themes.light}
											inline
										/>
										<Code
											class="hidden dark:inline"
											code={c.content}
											theme={themes.dark}
											lang="ts"
											inline
										/>
									</>
								),
							)}
						</p>
					</li>
				))}
			</ul>
		</div>
	))
}
