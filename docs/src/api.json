{
  "Tabs": {
    "constructorProps": [
      {
        "name": "selectWhenFocused",
        "type": "MaybeGetter<boolean>",
        "description": "If `true`, the value will be changed whenever a trigger is focused.",
        "defaultValue": "true"
      },
      {
        "name": "loop",
        "type": "MaybeGetter<boolean>",
        "description": "If the the trigger selection should loop when navigating with the arrow keys.",
        "defaultValue": "true"
      },
      {
        "name": "value",
        "type": "MaybeGetter<T>",
        "description": "The default value for `tabs.active`.\n\nWhen passing a getter, will be used as source of truth,\nmeaning that tabs.active only changes when the getter returns a new value.",
        "defaultValue": "undefined"
      },
      {
        "name": "onValueChange",
        "type": "(active: T) => void",
        "description": "Called when the `Tabs` instance tries to change the active tab."
      }
    ],
    "methods": [
      {
        "name": "getTrigger",
        "type": "(value: T) => { readonly \"data-melt-trigger\": T; readonly \"data-active\": \"\"; readonly tabindex: 0 | -1; readonly role: \"tab\"; readonly \"aria-selected\": boolean; readonly onclick: () => T; readonly onkeydown: (e: KeyboardEvent) => void; }",
        "description": "Gets the attributes and listeners for a tab trigger. Requires an identifying tab value"
      },
      {
        "name": "getContent",
        "type": "(value: T) => { readonly \"data-melt-content\": \"\"; readonly hidden: boolean; }",
        "description": "Gets the attributes and listeners for the tabs contents. Requires an identifying tab value"
      }
    ],
    "properties": [
      {
        "name": "value",
        "type": "T",
        "description": "The current selected tab."
      },
      {
        "name": "triggerList",
        "type": "{ readonly \"data-melt-trigger-list\": \"\"; readonly role: \"tablist\"; }",
        "description": "The attributes for the list that contains the tab triggers"
      }
    ]
  }
}